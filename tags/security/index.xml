<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>security on sainth.de</title><link>https://www.sainth.de/tags/security/</link><description>Recent content in security on sainth.de</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Â©2015-2020 Tobias Wink</copyright><lastBuildDate>Mon, 01 May 2017 19:30:00 +0100</lastBuildDate><atom:link href="https://www.sainth.de/tags/security/index.xml" rel="self" type="application/rss+xml"/><item><title>JWTs, a supplement to BasicAuth</title><link>https://www.sainth.de/blog/jwts-and-basic-auth/</link><pubDate>Mon, 01 May 2017 19:30:00 +0100</pubDate><guid>https://www.sainth.de/blog/jwts-and-basic-auth/</guid><description>&lt;p>Most REST APIs support BasicAuth when they require authentication and manage user data themselves. When choosing the function to protect stored passwords, it is important to find the right balance between user convenience and attacker protection. On the one hand, you want to keep adversaries at bay for as long as possible, but on the other hand, you also want to give users the shortest possible response times. All adaptive password hashing methods recommended by &lt;a href="https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet#Impose_infeasible_verification_on_attacker">OWASP&lt;/a> therefore offer the option of configuring the speed of the algorithm via a &lt;em>work factor&lt;/em>. In order to be able to select this &lt;em>work factor&lt;/em> as high as possible, without annoying the users unnecessarily, the use of JWTs lends itself.&lt;/p></description></item></channel></rss>