<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>security on sainth.de</title><link>https://www.sainth.de/de/tags/security/</link><description>Recent content in security on sainth.de</description><generator>Hugo -- gohugo.io</generator><language>de</language><copyright>©2015-2020 Tobias Wink</copyright><lastBuildDate>Mon, 01 May 2017 19:30:00 +0100</lastBuildDate><atom:link href="https://www.sainth.de/de/tags/security/index.xml" rel="self" type="application/rss+xml"/><item><title>JWTs, eine Ergänzung zu BasicAuth</title><link>https://www.sainth.de/de/blog/jwts-and-basic-auth/</link><pubDate>Mon, 01 May 2017 19:30:00 +0100</pubDate><guid>https://www.sainth.de/de/blog/jwts-and-basic-auth/</guid><description>&lt;p>Die meisten REST-APIs unterstützen BasicAuth, wenn sie eine Authentifizierung erfordern und die Nutzerdaten selber verwalten. Bei der Wahl der Funktion zum Schutz von gespeicherten Passwörtern gilt es, die richtige Balance zwischen Nutzerkomfort und Angreiferschutz zu finden. Man möchte einerseits Angreifer möglichst lange aufhalten, andererseits aber auch Benutzern möglichst geringe Antwortzeiten ermöglichen. Alle von der &lt;a href="https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet#Impose_infeasible_verification_on_attacker">OWASP&lt;/a> empfohlenen adaptiven Passwort-Hash-Verfahren bieten daher die Möglichkeit, die Geschwindigkeit des Algorithmus über einen &lt;em>Work Factor&lt;/em> zu konfigurieren. Um diesen &lt;em>Work Factor&lt;/em> möglichst hoch wählen zu können, ohne dabei die Benutzer unnötig zu verärgern, bietet sich nun die Nutzung von JWTs an.&lt;/p></description></item></channel></rss>